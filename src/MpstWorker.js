// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("rescript/lib/js/array.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_list = require("rescript/lib/js/js_list.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

function make_ports(roles) {
  var cnt = roles.length;
  var arr = Belt_Array.makeBy(cnt, (function (i) {
          return Belt_Array.makeBy(cnt - i | 0, (function (param) {
                        return new MessageChannel();
                      }));
        }));
  return Js_dict.fromList(Js_list.init(cnt, (function (i) {
                    var portlist = Js_list.init(cnt, (function (j) {
                            var port = i >= j || i > j ? Caml_array.get(Caml_array.get(arr, i), j).port1 : Caml_array.get(Caml_array.get(arr, j), i).port2;
                            return [
                                    Caml_array.get(roles, j),
                                    port
                                  ];
                          }));
                    return [
                            Caml_array.get(roles, i),
                            Js_dict.fromList(portlist)
                          ];
                  })));
}

function newWorker(prim) {
  return prim;
}

function initWorkers(mainrole, workers) {
  var worker_roles = $$Array.map((function (param) {
          return param[0];
        }), workers);
  var roles = $$Array.append([mainrole], worker_roles);
  var ports_map = make_ports(roles);
  workers.map(function (param) {
        var ports = ports_map[param[0]];
        var transfers = Js_dict.values(ports).map(function (prim) {
              return prim;
            });
        param[1].postMessage(ports, transfers);
        
      });
  return ports_map[mainrole];
}

var MainSide = {
  make_ports: make_ports,
  newWorker: newWorker,
  initWorkers: initWorkers
};

exports.MainSide = MainSide;
/* No side effect */
