// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

function make_ports(cnt) {
  var arr = Belt_Array.makeBy(cnt, (function (i) {
          return Belt_Array.makeBy(cnt - i | 0, (function (param) {
                        return new MessageChannel();
                      }));
        }));
  return Belt_Array.makeBy(cnt, (function (i) {
                return Belt_Array.makeBy(cnt, (function (j) {
                              if (i >= j) {
                                return Caml_array.get(Caml_array.get(arr, i), j).port1;
                              } else {
                                return Caml_array.get(Caml_array.get(arr, j), i).port2;
                              }
                            }));
              }));
}

function initWorkers(mainrole, workers) {
  var cnt = workers.length + 1 | 0;
  var ports_array = make_ports(cnt);
  ports_array.map(function (ports, i) {
        var port_map = {};
        workers.map(function (param, j) {
              return ((ports, port_map,role,j) => {
                port_map[role] = ports[j];
            })(ports, port_map, param[0], j);
            });
        return port_map;
      });
  workers.map(function (param, i) {
        var ports = Caml_array.get(ports_array, i);
        param[1].postMessage(ports, ports.map(function (prim) {
                  return prim;
                }));
        
      });
  
}

var MainSide = {
  make_ports: make_ports,
  initWorkers: initWorkers
};

exports.MainSide = MainSide;
/* No side effect */
