// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Curry = require("rescript/lib/js/curry.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var CamlinternalLazy = require("rescript/lib/js/camlinternalLazy.js");
var Caml_external_polyfill = require("rescript/lib/js/caml_external_polyfill.js");

function hello_field_call_obj(obj) {
  return obj.hello;
}

function hello_field_make_obj(v) {
  return {
          hello: v
        };
}

var hello_field = {
  call_obj: hello_field_call_obj,
  make_obj: hello_field_make_obj
};

var myhello = {
  hello: 123
};

var hellonum = Curry._1(hello_field_call_obj, myhello);

function hello_or_goodbye_concat(l, r) {
  return {
          hello: l.hello,
          goodbye: r.goodbye
        };
}

function hello_or_goodbye_split(lr) {
  return [
          {
            hello: lr.hello
          },
          {
            goodbye: lr.goodbye
          }
        ];
}

var hello_or_goodbye = {
  concat: hello_or_goodbye_concat,
  split: hello_or_goodbye_split
};

function lens_a_get(param) {
  return param[0];
}

function lens_a_put(param, a) {
  return [
          a,
          param[1],
          param[2]
        ];
}

var lens_a = {
  get: lens_a_get,
  put: lens_a_put
};

function lens_b_get(param) {
  return param[1];
}

function lens_b_put(param, b) {
  return [
          param[0],
          b,
          param[2]
        ];
}

var lens_b = {
  get: lens_b_get,
  put: lens_b_put
};

function lens_c_get(param) {
  return param[2];
}

function lens_c_put(param, c) {
  return [
          param[0],
          param[1],
          c
        ];
}

var lens_c = {
  get: lens_c_get,
  put: lens_c_put
};

var alice_role_meth = {
  call_obj: (function (obj) {
      return obj.alice;
    }),
  make_obj: (function (v) {
      return {
              alice: v
            };
    })
};

var alice = {
  role_meth: alice_role_meth,
  role_lens: lens_a
};

var bob_role_meth = {
  call_obj: (function (obj) {
      return obj.bob;
    }),
  make_obj: (function (v) {
      return {
              bob: v
            };
    })
};

var bob = {
  role_meth: bob_role_meth,
  role_lens: lens_b
};

var carol_role_meth = {
  call_obj: (function (obj) {
      return obj.carol;
    }),
  make_obj: (function (v) {
      return {
              carol: v
            };
    })
};

var carol = {
  role_meth: carol_role_meth,
  role_lens: lens_c
};

var hello_label_meth = {
  call_obj: (function (obj) {
      return obj.hello;
    }),
  make_obj: (function (v) {
      return {
              hello: v
            };
    })
};

var hello_label_var = {
  make_var: (function (v) {
      return {
              NAME: "hello",
              VAL: v
            };
    }),
  match_var: (function ($$var) {
      if (typeof $$var === "object" && $$var.NAME === "hello") {
        return Caml_option.some($$var.VAL);
      }
      
    })
};

var hello = {
  label_meth: hello_label_meth,
  label_var: hello_label_var
};

var goodbye_label_meth = {
  call_obj: (function (obj) {
      return obj.goodbye;
    }),
  make_obj: (function (v) {
      return {
              goodbye: v
            };
    })
};

var goodbye_label_var = {
  make_var: (function (v) {
      return {
              NAME: "goodbye",
              VAL: v
            };
    }),
  match_var: (function ($$var) {
      if (typeof $$var === "object" && $$var.NAME === "goodbye") {
        return Caml_option.some($$var.VAL);
      }
      
    })
};

var goodbye = {
  label_meth: goodbye_label_meth,
  label_var: goodbye_label_var
};

var add_label_meth = {
  call_obj: (function (obj) {
      return obj.add;
    }),
  make_obj: (function (v) {
      return {
              add: v
            };
    })
};

var add_label_var = {
  make_var: (function (v) {
      return {
              NAME: "add",
              VAL: v
            };
    }),
  match_var: (function ($$var) {
      if (typeof $$var === "object" && $$var.NAME === "add") {
        return Caml_option.some($$var.VAL);
      }
      
    })
};

var add = {
  label_meth: add_label_meth,
  label_var: add_label_var
};

var res_label_meth = {
  call_obj: (function (obj) {
      return obj.res;
    }),
  make_obj: (function (v) {
      return {
              res: v
            };
    })
};

var res_label_var = {
  make_var: (function (v) {
      return {
              NAME: "res",
              VAL: v
            };
    }),
  match_var: (function ($$var) {
      if (typeof $$var === "object" && $$var.NAME === "res") {
        return Caml_option.some($$var.VAL);
      }
      
    })
};

var res = {
  label_meth: res_label_meth,
  label_var: res_label_var
};

var bye_label_meth = {
  call_obj: (function (obj) {
      return obj.bye;
    }),
  make_obj: (function (v) {
      return {
              bye: v
            };
    })
};

var bye_label_var = {
  make_var: (function (v) {
      return {
              NAME: "bye",
              VAL: v
            };
    }),
  match_var: (function ($$var) {
      if (typeof $$var === "object" && $$var.NAME === "bye") {
        return Caml_option.some($$var.VAL);
      }
      
    })
};

var bye = {
  label_meth: bye_label_meth,
  label_var: bye_label_var
};

function get_port(ch) {
  return (((ch) => ch.raw_port))(ch);
}

function send(ch, v) {
  var port = get_port(ch);
  var $$var = ch.variant;
  var hello_v = Curry._1($$var._0.make_var, [
        v,
        null
      ]);
  port.postMessage(hello_v);
  return CamlinternalLazy.force(ch.out_cont).session;
}

function get_port_inp(ch) {
  return (((ch) => ch.raw_port))(ch);
}

function receive(ch) {
  var port = get_port_inp(ch);
  return new Promise((function (resolve, _reject) {
                var f = function (e) {
                  var $$var = e.data;
                  return resolve(Caml_external_polyfill.resolve("TODO")($$var, ch.wrappers));
                };
                return ((port,f) => {
      port.onmessage = (e) => {
        f(e)
      }
    })(port, f);
              }));
}

function merge_inp(meth, l, r) {
  var l$1 = Curry._1(meth.call_obj, l);
  var r$1 = Curry._1(meth.call_obj, r);
  return Curry._1(meth.make_obj, {
              wrappers: List.append(l$1.wrappers, r$1.wrappers)
            });
}

var closed = {
  LAZY_DONE: false,
  VAL: (function () {
      return {
              session: undefined,
              merge: (function (param, param$1) {
                  
                })
            };
    })
};

var finish = [
  closed,
  closed,
  closed
];

function comm(alice, bob, hello, next_triple) {
  var bob_next = Curry._1(bob.role_lens.get, next_triple);
  var bob_inp = {
    wrappers: {
      hd: /* Wrap */{
        _0: hello.label_var,
        _1: bob_next
      },
      tl: /* [] */0
    }
  };
  var bob_inp$1 = Curry._1(alice.role_meth.make_obj, bob_inp);
  var bob_inp$2 = {
    LAZY_DONE: false,
    VAL: (function () {
        var partial_arg = alice.role_meth;
        return {
                session: bob_inp$1,
                merge: (function (param, param$1) {
                    return merge_inp(partial_arg, param, param$1);
                  })
              };
      })
  };
  var mid_triple = Curry._2(bob.role_lens.put, next_triple, bob_inp$2);
  var alice_next = Curry._1(alice.role_lens.get, mid_triple);
  var alice_out_variant = /* VariantEx */{
    _0: hello.label_var
  };
  var alice_out = {
    out_cont: alice_next,
    variant: alice_out_variant
  };
  var alice_out$1 = Curry._1(bob.role_meth.make_obj, Curry._1(hello.label_meth.make_obj, alice_out));
  var alice_out$2 = {
    LAZY_DONE: false,
    VAL: (function () {
        return {
                session: alice_out$1,
                merge: (function (x, param) {
                    return x;
                  })
              };
      })
  };
  return Curry._2(alice.role_lens.put, mid_triple, alice_out$2);
}

function merge_global(left, right) {
  var c2 = right[2];
  var b2 = right[1];
  var a2 = right[0];
  var c1 = left[2];
  var b1 = left[1];
  var a1 = left[0];
  var a = {
    LAZY_DONE: false,
    VAL: (function () {
        var a1$1 = CamlinternalLazy.force(a1);
        var a2$1 = CamlinternalLazy.force(a2);
        return {
                session: Curry._2(a1$1.merge, a1$1.session, a2$1.session),
                merge: a1$1.merge
              };
      })
  };
  var b = {
    LAZY_DONE: false,
    VAL: (function () {
        var b1$1 = CamlinternalLazy.force(b1);
        var b2$1 = CamlinternalLazy.force(b2);
        return {
                session: Curry._2(b1$1.merge, b1$1.session, b2$1.session),
                merge: b1$1.merge
              };
      })
  };
  var c = {
    LAZY_DONE: false,
    VAL: (function () {
        var c1$1 = CamlinternalLazy.force(c1);
        var c2$1 = CamlinternalLazy.force(c2);
        return {
                session: Curry._2(c1$1.merge, c1$1.session, c2$1.session),
                merge: c1$1.merge
              };
      })
  };
  return [
          a,
          b,
          c
        ];
}

function choice_at(alice, disj, param, param$1) {
  var right = param$1[1];
  var alice2 = param$1[0];
  var left = param[1];
  var alice1 = param[0];
  var alice_l = Curry._1(alice1.role_lens.get, left);
  var alice_r = Curry._1(alice2.role_lens.get, right);
  var left$1 = Curry._2(alice1.role_lens.put, left, closed);
  var right$1 = Curry._2(alice2.role_lens.put, right, closed);
  var mid = merge_global(left$1, right$1);
  var alice_lr = {
    LAZY_DONE: false,
    VAL: (function () {
        var alice_l$1 = CamlinternalLazy.force(alice_l);
        var alice_r$1 = CamlinternalLazy.force(alice_r);
        var merge_disj = function (s1, s2) {
          var match = Curry._1(disj.split, s1);
          var match$1 = Curry._1(disj.split, s2);
          var sl = Curry._2(alice_l$1.merge, match[0], match$1[0]);
          var sr = Curry._2(alice_r$1.merge, match[1], match$1[1]);
          return Curry._2(disj.concat, sl, sr);
        };
        return {
                session: Curry._2(disj.concat, alice_l$1.session, alice_r$1.session),
                merge: merge_disj
              };
      })
  };
  return Curry._2(alice.role_lens.put, mid, alice_lr);
}

function extract(g, role) {
  var a = Curry._1(role.role_lens.get, g);
  return CamlinternalLazy.force(a).session;
}

function to_bob(disj) {
  return {
          concat: (function (l, r) {
              return {
                      bob: Curry._2(disj.concat, l.bob, r.bob)
                    };
            }),
          split: (function (lr) {
              var match = Curry._1(disj.split, lr.bob);
              return [
                      {
                        bob: match[0]
                      },
                      {
                        bob: match[1]
                      }
                    ];
            })
        };
}

var g = choice_at(alice, to_bob(hello_or_goodbye), [
      alice,
      comm(alice, bob, hello, finish)
    ], [
      alice,
      comm(alice, bob, goodbye, finish)
    ]);

extract(g, alice);

((start webworker for bob and return the messageport));

((traverse ch to set bob_port));

exports.hello_field = hello_field;
exports.myhello = myhello;
exports.hellonum = hellonum;
exports.hello_or_goodbye = hello_or_goodbye;
exports.lens_a = lens_a;
exports.lens_b = lens_b;
exports.lens_c = lens_c;
exports.alice = alice;
exports.bob = bob;
exports.carol = carol;
exports.hello = hello;
exports.goodbye = goodbye;
exports.add = add;
exports.res = res;
exports.bye = bye;
exports.get_port = get_port;
exports.send = send;
exports.get_port_inp = get_port_inp;
exports.receive = receive;
exports.merge_inp = merge_inp;
exports.closed = closed;
exports.finish = finish;
exports.comm = comm;
exports.merge_global = merge_global;
exports.choice_at = choice_at;
exports.extract = extract;
exports.to_bob = to_bob;
/* hellonum Not a pure module */
